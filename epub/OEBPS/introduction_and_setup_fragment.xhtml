<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html>

        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
          <title>Chapter 1</title>
          <link rel="stylesheet" href="styles/pygments.css" type="text/css" />
          <link rel="stylesheet" href="styles/softcover.css" type="text/css" />
          <link rel="stylesheet" href="styles/epub.css" type="text/css" />
          <link rel="stylesheet" href="styles/custom.css" type="text/css"/>
          <link rel="stylesheet" href="styles/custom_epub.css" type="text/css"/>
          <link rel="stylesheet" type="application/vnd.adobe-page-template+xml" href="styles/page-template.xpgt" />
        </head>

        <body>
          <div id="cid1" class="chapter"><h1><a href="introduction_and_setup_fragment.xhtml#cid1" class="heading hyperref"><span class="number">Chapter 1 </span>Introduction and Setup</a></h1>
<p class="noindent">Why another book about how to develop an application (app) in Rails?<span class="intersentencespace"></span> But wait, this book should give you a basic introduction on how to develop a web app with <a href="http://www.padrinorb.com" rel="noopener">Padrino</a>.<span class="intersentencespace"></span> Padrino is “The Elegant Ruby Web Framework”.<span class="intersentencespace"></span> Padrino is based upon <a href="http://www.sinatrarb.com" rel="noopener">Sinatra</a>, which is a simple Domain Specific Language for quickly creating web apps in Ruby.<span class="intersentencespace"></span> When writing Sinatra apps many developers miss some of the extra conveniences that Rails offers, this is where Padrino comes in as it provides many of these while still staying true to Sinatra’s philosophy of being simple and lightweight.<span class="intersentencespace"></span> In order to understand the mantra of the Padrino webpage: “Padrino is a full-stack ruby framework built upon Sinatra” you have to read on.</p>
</div><div id="cid2" class="section"><h2><a href="introduction_and_setup_fragment.xhtml#cid2" class="heading hyperref"><span class="number">1.1 </span>Motivation</a></h2>
<p class="noindent">Shamelessly I have to tell you that I’m learning Padrino through writing a book about instead of doing a blog post series about it.<span class="intersentencespace"></span> Besides I want to provide up-to-date documentation for Padrino which is at the moment scattered around the Padrino’s web page <a href="http://www.padrinorb.com" rel="noopener">padrinorb.com</a>.</p>
<p>Although Padrino borrows many ideas and techniques from it’s big brother <a href="http://rubyonrails.org" rel="noopener">Rails</a> it aims to be more modular and allows you to interchange various components with considerable ease.<span class="intersentencespace"></span> You will see this when you will the creation of two different application we are going to build throughout the book.</p>
<div id="uid1" class="subsection"><h3><a href="introduction_and_setup_fragment.xhtml#uid1" class="heading hyperref"><span class="number">1.1.1 </span>Why Padrino</a></h3>
<p class="noindent">Nothing is enabled without explicit choice.<span class="intersentencespace"></span> You as a programmer know what database is best for your application, which Gems don’t carry security issues.<span class="intersentencespace"></span> If you are honest to yourself you can only learn a framework by heart if you go and digg under the hood.<span class="intersentencespace"></span> Because Padrino is small and you can understand most of the source.<span class="intersentencespace"></span> There is no need for monkey-patching, almost everything can be changed via an API. Padrino is rack-friendly, a lot of techniques that are common to Ruby can be reused.<span class="intersentencespace"></span> Having a low stack frame makes it easier for debugging.<span class="intersentencespace"></span> The best Rails convenience parts like <code>I18n</code> and <code>active_support</code> are available for you.</p>
<p>Before going any further you may ask: Why should you care about learning and using another web framework?<span class="intersentencespace"></span> Because you want something that is <em>easy to use</em>, <em>simple to hack</em>, and <em>open to any contribution</em>.<span class="intersentencespace"></span> If you’ve done Rails before, you may reach the point where you can’t see how things are solved in particular order.<span class="intersentencespace"></span> In other words: There are many layers between you and the core of you application.<span class="intersentencespace"></span> You want to have the freedom to chose which layers you want to use in your application.<span class="intersentencespace"></span> This freedoms comes with the help of the <a href="http://www.sinatrarb.com" rel="noopener">Sinatra framework</a>.</p>
<p>Padrino adds the core values of Rails into Sinatra and gives you the following extras:</p>
<ul>
<li><code>orm</code>: Choose which adapter you want for a new application.<span class="intersentencespace"></span>
</li>
<li><code>multiple application support</code>: Split you application into small, more manageble-and-testable parts that are easier to maintain and to test.<span class="intersentencespace"></span>
</li>
<li><code>admin interface</code>: Provides an easy way to view, search, and modify data in your application.<span class="intersentencespace"></span>
</li></ul>
<p>When you are starting a new project in Padrino only a few files are created and, when your taking a closer look at them, you will see what each part of the code does.<span class="intersentencespace"></span> Having less files means less code and that is easier to maintain.<span class="intersentencespace"></span> Less code means that your application will run faster.</p>
<p>With the ability to manage different applications, for example: for your blog, your image gallery, or your payment cycle; by separating your business logic, you can share data models, session information and the admin interface between them without duplicating code.</p>
<p><a href="https://speakerdeck.com/daddye/padrino-framework-0-dot-11-and-1-dot-0" rel="noopener">Remember</a>: “<strong>Be tiny.<span class="intersentencespace"></span> Be fast.<span class="intersentencespace"></span> Be a Padrino</strong>”</p>
</div></div><div id="cid3" class="section"><h2><a href="introduction_and_setup_fragment.xhtml#cid3" class="heading hyperref"><span class="number">1.2 </span>Tools and Knowledge</a></h2>
<p class="noindent">I won’t tell you which operating system you should use - there is an interesting discussion on <a href="https://news.ycombinator.com/item?id=3786674" rel="noopener">hackernews</a>.<span class="intersentencespace"></span> I’ll leave it free for the reader of this book which to use, because you are reading this book to learn Padrino.</p>
<p>To actually see a running padrino app, you need a web browser of your choice.<span class="intersentencespace"></span> For writing the application, you can either use an Integrated Development Environment (IDE) or with a plain text editor.</p>
<p>Nowadays there are a bunch of Integrated Development Environments (IDEs) out there:</p>
<ul>
<li><a href="https://www.jetbrains.com/ruby" rel="noopener">RubyMine by JetBrains</a> - commercial, available for all platforms
</li>
<li><a href="https://projects.eclipse.org/projects/technology.dltk" rel="noopener">Eclipse Dynamic Languages Toolkit</a> - free, available for all platforms
</li></ul>
<p>Here is a list of plain text editors which are a popular choice among Ruby developers:</p>
<ul>
<li><a href="https://www.gnu.org/s/emacs" rel="noopener">Emacs</a> - free, available for all platforms.<span class="intersentencespace"></span>
</li>
<li><a href="https://wiki.gnome.org/Apps/Gedit" rel="noopener">Gedit</a> - free, available for Linux and Windows.<span class="intersentencespace"></span>
</li>
<li><a href="https://notepad-plus-plus.org" rel="noopener">Notepad++</a> - free, available only for Windows.<span class="intersentencespace"></span>
</li>
<li><a href="https://www.sublimetext.com/" rel="noopener">SublimeText</a> - commercial, available for all platforms.<span class="intersentencespace"></span>
</li>
<li><a href="https://macromates.com/" rel="noopener">Textmate</a> - commercial, available only for Mac.<span class="intersentencespace"></span>
</li>
<li><a href="http://www.vim.org" rel="noopener">Vim</a> - free, available for all platforms.<span class="intersentencespace"></span>
</li></ul>
<p>All tools have their strengths and weaknesses.<span class="intersentencespace"></span> Try to find the software that works best for you.<span class="intersentencespace"></span> The main goal is that
you comfortable because you will spend a lot of time with it.</p>
<div id="uid13" class="subsection"><h3><a href="introduction_and_setup_fragment.xhtml#uid13" class="heading hyperref"><span class="number">1.2.1 </span>Installing Ruby With rbenv</a></h3>
<p class="noindent">Instead of using the build-in software package for Ruby of your operating system, we will use
<a href="https://github.com/sstephenson/rbenv" rel="noopener">rbenv</a> which lets you switch between multiple versions of Ruby.</p>
<p>First, we need to use <a href="https://git-scm.org" rel="noopener">git</a> to get the current version of rbenv:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$HOME</span>
<span class="nv">$ </span>git clone git://github.com/sstephenson/rbenv.git .rbenv
</pre></div></div>
<p>In case you shouldn’t want to use git, you can also download the latest version as a zip file from
<a href="https://github.com" rel="noopener">GitHub</a>.</p>
<p>You need to add the directory that contains rbenv to your <code>$PATH</code> environment variable.<span class="intersentencespace"></span> If you are on Mac, you have to
replace <code>.bashrc</code> with <code>.bash_profile</code> in all of the following commands):</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'export PATH="$HOME/.rbenv/bin:$PATH"'</span> &gt;&gt; ~/.bashrc
</pre></div></div>
<p>To enable auto completion for <code>rbenv</code> commands, we need to perform the following command:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'eval "$(rbenv init -)"'</span> &gt;&gt; ~/.bashrc
</pre></div></div>
<p>Next, we need to restart our shell to enable the last changes:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">exec</span> <span class="nv">$SHELL</span>
</pre></div></div>
<p>Basically, there are two ways to install different versions of Ruby: You can compile Ruby on your
own and try to manage the versions and gems on your own, or you use a tool that helps you.</p>
<p><strong>ruby-build</strong></p>
<p>Because we don’t want to download and compile different Ruby versions on our own, we will use the
<a href="https://github.com/sstephenson/ruby-build" rel="noopener">ruby-build</a> plugin for rbenv:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>mkdir ~/.rbenv/plugins
<span class="nv">$ </span><span class="nb">cd</span> ~/.rbenv/plugins
<span class="nv">$ </span>git clone git://github.com/sstephenson/ruby-build.git
</pre></div></div>
<p>If you now run <code>rbenv install</code> you can see all the different Ruby version you can install and use for different Ruby
projects.<span class="intersentencespace"></span> We are going to install <code>ruby 2.4.1</code>:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>rbenv install 2.4.1
</pre></div></div>
<p>This command will take a couple of minutes, so it’s best to grab a Raider, which is now known as
<a href="https://en.wikipedia.org/wiki/Twix" rel="noopener">Twix</a>.<span class="intersentencespace"></span> After everything runs fine, you have to run <code>rbenv rehash</code> to rebuild
the internal rbenv libraries.<span class="intersentencespace"></span> The last step is to make Ruby 2.4.1 the current executable on your machine:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>rbenv global 2.4.1
</pre></div></div>
<p>Check that the correct executable is active by exexuting <code>ruby -v</code>.<span class="intersentencespace"></span> The output should look like:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>2.4.1 <span class="o">(</span><span class="nb">set </span>by /home/.rbenv/versions<span class="o">)</span>
</pre></div></div>
<p>Now you are a ready to hack on with Padrino!</p>
</div>
<div id="uid14" class="subsection"><h3><a href="introduction_and_setup_fragment.xhtml#uid14" class="heading hyperref"><span class="number">1.2.2 </span>Ruby Knowledge</a></h3>
<p class="noindent">For any non-Ruby people, I strongly advise you to check out one of these books and learn the basics of Ruby before
continuing here.</p>
<ul>
<li><a href="https://pragprog.com/book/ruby4/programming-ruby-1-9-2-0" rel="noopener">Programming Ruby</a> - the
standard book on Ruby.<span class="intersentencespace"></span>
</li>
<li><a href="http://poignant.guide/" rel="noopener">Poignant Guide to Ruby</a> -
written by <a href="https://en.wikipedia.org/wiki/Why_the_lucky_stiff" rel="noopener">why the lucky stiff</a> in
an entertaining and educational way.<span class="intersentencespace"></span>
</li></ul>
<p>In this book, I assume readers having Ruby knowledge and will not be explaining every last detail.<span class="intersentencespace"></span> I will explain
Padrino-specific coding techniques and how to get most parts under test.</p>
</div></div><div id="cid4" class="section"><h2><a href="introduction_and_setup_fragment.xhtml#cid4" class="heading hyperref"><span class="number">1.3 </span>Hello Padrino</a></h2>
<p class="noindent">The basic layout of our application is displayed on the following image application:</p>
<div class="graphics image"><img src="images/01/application_overview.jpg" alt="images/01/application_overview" /></div>
<p>It is possible that you know this section from several tutorials, which makes you even more comfortable with your first program.</p>
<p>Now, get your hands dirty and start coding.</p>
<p>First of all we need to install the <a href="https://rubygems.org/gems/padrino" rel="noopener">padrino gem</a>.<span class="intersentencespace"></span> We are using the last stable version of Padrino (during the release of this book it is version <a href="https://rubygems.org/gems/padrino/versions/0.14.0.1" rel="noopener">0.14.0.1</a>).<span class="intersentencespace"></span> Execute this command.</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>gem install padrino
</pre></div></div>
<p>This will install all necessary dependencies and gets you ready to start.<span class="intersentencespace"></span> Now we will generate a fresh new Padrino project:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>padrino generate project hello-padrino
</pre></div></div>
<p>Let’s go through each part of this command:</p>
<ul>
<li><code>padrino generate</code>:<sup id="cha-1_footnote-ref-1" class="footnote"><a href="#cha-1_footnote-1">1</a></sup> Tells Padrino to execute the generator with the specified options.<span class="intersentencespace"></span> The options can be used to create other <strong>components</strong> for your app, like a <strong>mailing system</strong> or an <strong>admin panel</strong> to manage your database entries.<span class="intersentencespace"></span> We will handle these things in a future chapter.<span class="intersentencespace"></span> A shortcut for generate is <code>g</code> which we will use in all following examples.<span class="intersentencespace"></span>
</li>
<li><code>project</code>: Tells Padrino to generate a new app.<span class="intersentencespace"></span>
</li>
<li><code>hello-padrino</code>: The name of the new app, which is also the directory name.<span class="intersentencespace"></span>
</li></ul>
<p>The console output should look like the following:</p>
<div class="code"><div class="highlight"><pre>  create
  create  .gitignore
  create  config.ru
  create  config/apps.rb
  create  config/boot.rb
  create  public/favicon.ico
  create  public/images
  create  public/javascripts
  create  public/stylesheets
  create  .components
  create  app
  create  app/app.rb
  create  app/controllers
  create  app/helpers
  create  app/views
  create  app/views/layouts
  append  config/apps.rb
  create  Gemfile
  create  Rakefile
  create  exe/hello-padrino
  create  tmp
  create  tmp/.keep
  create  log
  create  log/.keep
skipping  orm component...
skipping  <span class="nb">test </span>component...
skipping  mock component...
skipping  script component...
skipping  renderer component...
skipping  stylesheet component...
identical  .components
   force  .components
   force  .components

<span class="o">=================================================================</span>
hello-padrino is ready <span class="k">for</span> development!
<span class="o">=================================================================</span>
<span class="nv">$ </span><span class="nb">cd</span> ./hello-padrino
<span class="nv">$ bundle</span>
<span class="o">=================================================================</span>
</pre></div></div>
<p>The last line in the console output tells you the next steps you have to perform.<span class="intersentencespace"></span> Before we start coding our app, we need some sort of package management for Ruby gems.</p>
<p>Ruby has a nice package manager called <a href="https://bundler.io/" rel="noopener">bundler</a> which installs all necessary gems in the versions you would like to have for your project.<span class="intersentencespace"></span> Other developers know now how to work with your project even after years.<span class="intersentencespace"></span> The <a href="https://bundler.io/gemfile.html#gemfiles" rel="noopener">Gemfile</a> declares the gems that you want to install.<span class="intersentencespace"></span> Bundler takes the content of the Gemfile and will install every package declared in this file.</p>
<p>To install <a href="https://rubygems.org/gems/bundler/versions/1.14.6" rel="noopener">bundler 1.14.6</a>, execute the following command and check the console output:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>gem install bundler
</pre></div></div>
<p>Now we have everything we need to run the <code>bundle</code> command and install our dependencies:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span><span class="nb">cd </span>hello-padrino
<span class="nv">$ </span>bundle
  Fetching gem metadata from https://rubygems.org/.........
</pre></div></div>
<p>Let’s open the file <code>app/app.rb</code> (think of it as the root controller of your app) and insert the following code before the last <code>end</code>:</p>
<div class="code"><div class="highlight"><pre><span class="c1"># app/app.rb</span>

<span class="k">module</span> <span class="nn">HelloWorld</span>
  <span class="k">class</span> <span class="nc">App</span> <span class="o">&lt;</span> <span class="no">Padrino</span><span class="o">::</span><span class="no">Application</span>

    <span class="n">get</span> <span class="s2">"/"</span> <span class="k">do</span>
      <span class="s2">"Hello Padrino!"</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div>
<p>Now run the app with:</p>
<div class="code"><div class="highlight"><pre><span class="nv">$ </span>bundle <span class="nb">exec </span>padrino start
</pre></div></div>
<p>Instead of writing <code>start</code>, we can also use the <code>s</code> alias.<span class="intersentencespace"></span> Now, fire up your browser with the URL <a href="http://localhost:3000" rel="noopener">http://localhost:3000</a> and see the <code>Hello World</code> Greeting being printed.</p>
<p>Congratulations, you’ve built your first Padrino app!</p>
<div id="uid21" class="subsection"><h3><a href="introduction_and_setup_fragment.xhtml#uid21" class="heading hyperref"><span class="number">1.3.1 </span>Directory Structure of Padrino</a></h3>
<p class="noindent">Navigating through the various parts of a project is essential.<span class="intersentencespace"></span> Thus we will go through the basic file structure of the
<em>hello-padrino</em> project.<span class="intersentencespace"></span> The app consists of the following parts:</p>
<div class="code"><div class="highlight"><pre><span class="p">|</span>-- app
<span class="p">|</span>   <span class="p">|</span>-- app.rb
<span class="p">|</span>   <span class="p">|</span>-- controllers
<span class="p">|</span>   <span class="p">|</span>-- helpers
<span class="p">|</span>   <span class="sb">`</span>-- views
<span class="p">|</span>       <span class="sb">`</span>-- layouts
<span class="p">|</span>-- bin
<span class="p">|</span>-- config
<span class="p">|</span>   <span class="p">|</span>-- apps.rb
<span class="p">|</span>   <span class="p">|</span>-- boot.rb
<span class="p">|</span>   <span class="sb">`</span>-- database.rb
<span class="p">|</span>-- config.ru
<span class="p">|</span>-- Gemfile
<span class="p">|</span>-- Gemfile.lock
<span class="p">|</span>-- public
<span class="p">|</span>   <span class="p">|</span>-- favicon.ico
<span class="p">|</span>   <span class="p">|</span>-- images
<span class="p">|</span>   <span class="p">|</span>-- javascripts
<span class="p">|</span>   <span class="sb">`</span>-- stylesheets
<span class="p">|</span>-- Rakefile
<span class="sb">`</span>-- tmp
</pre></div></div>
<p>We will go through each part.</p>
<ul>
<li><strong>Gemfile</strong>: The place where you declare all the necessary <em>gems</em> for your project.<span class="intersentencespace"></span> Bundle takes the content of this
file and installs all the dependencies.<span class="intersentencespace"></span>
</li>
<li><strong>Gemfile.lock</strong>: This is a file generated by Bundler after you run <code>bundle install</code> within your project.<span class="intersentencespace"></span> It is a
listing of all the installed gems and their versions.<span class="intersentencespace"></span>
</li>
<li><strong>app</strong>: Contains the “executable” files of your project, along with the controllers, helpers, and views of your app.
<ul>
<li><strong>app.rb</strong>: The primary configuration file of your application.<span class="intersentencespace"></span> Here you can enable or disable various options like
observers, your mail settings, specify the location of your assets directory, enable sessions, and other options.<span class="intersentencespace"></span>
</li>
<li><strong>controller</strong>: The controllers make the model data available to the view.<span class="intersentencespace"></span> They define the URL routes that are
callable in your app and defines the actions that are triggered by requests.<span class="intersentencespace"></span>
</li>
<li><strong>helper</strong>: Helpers are small snippets of code that can be called in your views to help you prevent repetition -
by following the <code>DRY</code> (Don’t Repeat Yourself) principle.<span class="intersentencespace"></span>
</li>
<li><strong>views</strong>: Contains the templates that are filled with model data and rendered by a controller.<span class="intersentencespace"></span>
</li></ul>
</li>
<li><strong>config</strong>: General settings for the app, including hooks (explained later) that should be performed before or after
the app is loaded, setting the environment (e.g.<span class="intersentencespace"></span> production, development, test) and mounting other apps within the
existing app under different subdomains.
<ul>
<li><strong>apps.rb</strong>: Allows you to configure a compound app that consists of several smaller apps.<span class="intersentencespace"></span> Each app has it’s own
default route, from which requests will be handled.<span class="intersentencespace"></span> Here you can set site wide configurations like caching, CSRF protection, sub-app mounting, etc.<span class="intersentencespace"></span>
</li>
<li><strong>boot.rb</strong>: Basic settings for your app which will be run when you start it.<span class="intersentencespace"></span> Here you can turn on or off the
error logging, enable internationalization and localization, load any prerequisites like HTML5 or Mailer helpers, etc.<span class="intersentencespace"></span>
</li>
<li><strong>database.rb</strong>: Define the adapters for all the environments in your application.<span class="intersentencespace"></span>
</li></ul>
</li>
<li><strong>config.ru</strong>: Contains the complete configuration options of the app, such as which port the app listens to, whenever
it uses other Padrino apps as middleware and more.<span class="intersentencespace"></span> This file will be used when Padrino is started from the command line.<span class="intersentencespace"></span>
</li>
<li><strong>public</strong>: Directory where you put static resources like images directory, JavaScript files, and style sheets.<span class="intersentencespace"></span> You can
use for your asset packaging sinatra-assetpack or sprockets.<span class="intersentencespace"></span>
</li>
<li><strong>tmp</strong>: This directory holds temporary files for intermediate processing like cache, tests, local mails, etc.<span class="intersentencespace"></span>
</li></ul>
</div></div><div id="cid5" class="section"><h2><a href="introduction_and_setup_fragment.xhtml#cid5" class="heading hyperref"><span class="number">1.4 </span>Conclusion</a></h2>
<p class="noindent">We have covered a lot of stuff in this chapter: installing the Padrino gem, finding the right tools to manage different Ruby versions, and creating our first Padrino app.<span class="intersentencespace"></span> Now it is time to jump into a real project!</p>
</div><div id="cha-1_footnotes">
  <ol class="footnotes">
    <li id="cha-1_footnote-1">You can also use <code>padrino g</code> or <code>padrino-gen</code> for the <code>generate</code> command, which will be used in the rest of this book <a class="arrow" href="#cha-1_footnote-ref-1">↑</a></li>
  </ol>
</div>
        </body>
        </html>